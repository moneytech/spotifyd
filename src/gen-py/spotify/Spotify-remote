#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Spotify
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool is_service_ready()'
  print '  SpotifyCredential check_in(SpotifyCredential cred)'
  print '  bool check_out(SpotifyCredential cred)'
  print '  bool loginSession(SpotifyCredential cred)'
  print '  bool isLoggedIn(SpotifyCredential cred)'
  print '  i64 getStateTS(SpotifyCredential cred)'
  print '  i64 getSessionStateTS(SpotifyCredential cred)'
  print '  void logoutSession(SpotifyCredential cred)'
  print '  void sendCommand(SpotifyCredential cred, SpotifyCmd cmd)'
  print '  SpotifyPlaylist search(SpotifyCredential cred, SpotifySearch criteria)'
  print '  SpotifyPlaylistList getPlaylists(SpotifyCredential cred)'
  print '  SpotifyPlaylist getPlaylist(SpotifyCredential cred, i32 plist_id)'
  print '  SpotifyPlaylist getPlaylistByName(SpotifyCredential cred, string name)'
  print '  void selectPlaylist(SpotifyCredential cred, string playlist)'
  print '  void selectPlaylistById(SpotifyCredential cred, i32 plist_id)'
  print '  void selectTrack(SpotifyCredential cred, string track)'
  print '  void selectTrackById(SpotifyCredential cred, i32 track_id)'
  print '  bool merge2playlist(SpotifyCredential cred, string pl, SpotifyPlaylist tracks)'
  print '  bool add2playlist(SpotifyCredential cred, string pl, SpotifyTrack track)'
  print '  SpotifyTrack whats_playing(SpotifyCredential cred)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Spotify.Client(protocol)
transport.open()

if cmd == 'is_service_ready':
  if len(args) != 0:
    print 'is_service_ready requires 0 args'
    sys.exit(1)
  pp.pprint(client.is_service_ready())

elif cmd == 'check_in':
  if len(args) != 1:
    print 'check_in requires 1 args'
    sys.exit(1)
  pp.pprint(client.check_in(eval(args[0]),))

elif cmd == 'check_out':
  if len(args) != 1:
    print 'check_out requires 1 args'
    sys.exit(1)
  pp.pprint(client.check_out(eval(args[0]),))

elif cmd == 'loginSession':
  if len(args) != 1:
    print 'loginSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.loginSession(eval(args[0]),))

elif cmd == 'isLoggedIn':
  if len(args) != 1:
    print 'isLoggedIn requires 1 args'
    sys.exit(1)
  pp.pprint(client.isLoggedIn(eval(args[0]),))

elif cmd == 'getStateTS':
  if len(args) != 1:
    print 'getStateTS requires 1 args'
    sys.exit(1)
  pp.pprint(client.getStateTS(eval(args[0]),))

elif cmd == 'getSessionStateTS':
  if len(args) != 1:
    print 'getSessionStateTS requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSessionStateTS(eval(args[0]),))

elif cmd == 'logoutSession':
  if len(args) != 1:
    print 'logoutSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.logoutSession(eval(args[0]),))

elif cmd == 'sendCommand':
  if len(args) != 2:
    print 'sendCommand requires 2 args'
    sys.exit(1)
  pp.pprint(client.sendCommand(eval(args[0]),eval(args[1]),))

elif cmd == 'search':
  if len(args) != 2:
    print 'search requires 2 args'
    sys.exit(1)
  pp.pprint(client.search(eval(args[0]),eval(args[1]),))

elif cmd == 'getPlaylists':
  if len(args) != 1:
    print 'getPlaylists requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPlaylists(eval(args[0]),))

elif cmd == 'getPlaylist':
  if len(args) != 2:
    print 'getPlaylist requires 2 args'
    sys.exit(1)
  pp.pprint(client.getPlaylist(eval(args[0]),eval(args[1]),))

elif cmd == 'getPlaylistByName':
  if len(args) != 2:
    print 'getPlaylistByName requires 2 args'
    sys.exit(1)
  pp.pprint(client.getPlaylistByName(eval(args[0]),args[1],))

elif cmd == 'selectPlaylist':
  if len(args) != 2:
    print 'selectPlaylist requires 2 args'
    sys.exit(1)
  pp.pprint(client.selectPlaylist(eval(args[0]),args[1],))

elif cmd == 'selectPlaylistById':
  if len(args) != 2:
    print 'selectPlaylistById requires 2 args'
    sys.exit(1)
  pp.pprint(client.selectPlaylistById(eval(args[0]),eval(args[1]),))

elif cmd == 'selectTrack':
  if len(args) != 2:
    print 'selectTrack requires 2 args'
    sys.exit(1)
  pp.pprint(client.selectTrack(eval(args[0]),args[1],))

elif cmd == 'selectTrackById':
  if len(args) != 2:
    print 'selectTrackById requires 2 args'
    sys.exit(1)
  pp.pprint(client.selectTrackById(eval(args[0]),eval(args[1]),))

elif cmd == 'merge2playlist':
  if len(args) != 3:
    print 'merge2playlist requires 3 args'
    sys.exit(1)
  pp.pprint(client.merge2playlist(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'add2playlist':
  if len(args) != 3:
    print 'add2playlist requires 3 args'
    sys.exit(1)
  pp.pprint(client.add2playlist(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'whats_playing':
  if len(args) != 1:
    print 'whats_playing requires 1 args'
    sys.exit(1)
  pp.pprint(client.whats_playing(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
