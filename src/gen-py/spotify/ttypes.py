#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SpotifyCmd:
  PLAY = 1
  PAUSE = 2
  NEXT = 3
  PREV = 4
  RAND = 5
  LINEAR = 6
  REPEAT_ONE = 7
  REPEAT = 8

  _VALUES_TO_NAMES = {
    1: "PLAY",
    2: "PAUSE",
    3: "NEXT",
    4: "PREV",
    5: "RAND",
    6: "LINEAR",
    7: "REPEAT_ONE",
    8: "REPEAT",
  }

  _NAMES_TO_VALUES = {
    "PLAY": 1,
    "PAUSE": 2,
    "NEXT": 3,
    "PREV": 4,
    "RAND": 5,
    "LINEAR": 6,
    "REPEAT_ONE": 7,
    "REPEAT": 8,
  }


class SpotifyTrack:
  """
  Attributes:
   - _id
   - _name
   - _artist
   - _minutes
   - _seconds
   - _popularity
   - _genre
   - _starred
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, '_id', None, None, ), # 1
    (2, TType.STRING, '_name', None, None, ), # 2
    (3, TType.STRING, '_artist', None, None, ), # 3
    (4, TType.BYTE, '_minutes', None, None, ), # 4
    (5, TType.BYTE, '_seconds', None, None, ), # 5
    (6, TType.BYTE, '_popularity', None, None, ), # 6
    (7, TType.STRING, '_genre', None, None, ), # 7
    (8, TType.BOOL, '_starred', None, None, ), # 8
  )

  def __init__(self, _id=None, _name=None, _artist=None, _minutes=None, _seconds=None, _popularity=None, _genre=None, _starred=None,):
    self._id = _id
    self._name = _name
    self._artist = _artist
    self._minutes = _minutes
    self._seconds = _seconds
    self._popularity = _popularity
    self._genre = _genre
    self._starred = _starred

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self._id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self._name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self._artist = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self._minutes = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self._seconds = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self._popularity = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self._genre = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self._starred = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpotifyTrack')
    if self._id is not None:
      oprot.writeFieldBegin('_id', TType.I32, 1)
      oprot.writeI32(self._id)
      oprot.writeFieldEnd()
    if self._name is not None:
      oprot.writeFieldBegin('_name', TType.STRING, 2)
      oprot.writeString(self._name)
      oprot.writeFieldEnd()
    if self._artist is not None:
      oprot.writeFieldBegin('_artist', TType.STRING, 3)
      oprot.writeString(self._artist)
      oprot.writeFieldEnd()
    if self._minutes is not None:
      oprot.writeFieldBegin('_minutes', TType.BYTE, 4)
      oprot.writeByte(self._minutes)
      oprot.writeFieldEnd()
    if self._seconds is not None:
      oprot.writeFieldBegin('_seconds', TType.BYTE, 5)
      oprot.writeByte(self._seconds)
      oprot.writeFieldEnd()
    if self._popularity is not None:
      oprot.writeFieldBegin('_popularity', TType.BYTE, 6)
      oprot.writeByte(self._popularity)
      oprot.writeFieldEnd()
    if self._genre is not None:
      oprot.writeFieldBegin('_genre', TType.STRING, 7)
      oprot.writeString(self._genre)
      oprot.writeFieldEnd()
    if self._starred is not None:
      oprot.writeFieldBegin('_starred', TType.BOOL, 8)
      oprot.writeBool(self._starred)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self._id is None:
      raise TProtocol.TProtocolException(message='Required field _id is unset!')
    if self._name is None:
      raise TProtocol.TProtocolException(message='Required field _name is unset!')
    if self._artist is None:
      raise TProtocol.TProtocolException(message='Required field _artist is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpotifySearch:
  """
  Attributes:
   - artist
   - album
   - track
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'artist', None, None, ), # 1
    (2, TType.STRING, 'album', None, None, ), # 2
    (3, TType.STRING, 'track', None, None, ), # 3
  )

  def __init__(self, artist=None, album=None, track=None,):
    self.artist = artist
    self.album = album
    self.track = track

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.artist = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.album = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.track = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpotifySearch')
    if self.artist is not None:
      oprot.writeFieldBegin('artist', TType.STRING, 1)
      oprot.writeString(self.artist)
      oprot.writeFieldEnd()
    if self.album is not None:
      oprot.writeFieldBegin('album', TType.STRING, 2)
      oprot.writeString(self.album)
      oprot.writeFieldEnd()
    if self.track is not None:
      oprot.writeFieldBegin('track', TType.STRING, 3)
      oprot.writeString(self.track)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SpotifyCredential:
  """
  Attributes:
   - _username
   - _passwd
   - _uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, '_username', None, None, ), # 1
    (2, TType.STRING, '_passwd', None, None, ), # 2
    (3, TType.STRING, '_uid', None, None, ), # 3
  )

  def __init__(self, _username=None, _passwd=None, _uid=None,):
    self._username = _username
    self._passwd = _passwd
    self._uid = _uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self._username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self._passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self._uid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SpotifyCredential')
    if self._username is not None:
      oprot.writeFieldBegin('_username', TType.STRING, 1)
      oprot.writeString(self._username)
      oprot.writeFieldEnd()
    if self._passwd is not None:
      oprot.writeFieldBegin('_passwd', TType.STRING, 2)
      oprot.writeString(self._passwd)
      oprot.writeFieldEnd()
    if self._uid is not None:
      oprot.writeFieldBegin('_uid', TType.STRING, 3)
      oprot.writeString(self._uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self._username is None:
      raise TProtocol.TProtocolException(message='Required field _username is unset!')
    if self._passwd is None:
      raise TProtocol.TProtocolException(message='Required field _passwd is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
