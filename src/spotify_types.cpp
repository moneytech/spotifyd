/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "spotify_types.h"



int _kSpotifyCmdValues[] = {
  SpotifyCmd::PLAY,
  SpotifyCmd::PAUSE,
  SpotifyCmd::NEXT,
  SpotifyCmd::PREV,
  SpotifyCmd::RAND,
  SpotifyCmd::LINEAR,
  SpotifyCmd::REPEAT_ONE,
  SpotifyCmd::REPEAT
};
const char* _kSpotifyCmdNames[] = {
  "PLAY",
  "PAUSE",
  "NEXT",
  "PREV",
  "RAND",
  "LINEAR",
  "REPEAT_ONE",
  "REPEAT"
};
const std::map<int, const char*> _SpotifyCmd_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSpotifyCmdValues, _kSpotifyCmdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SpotifyTrack::ascii_fingerprint = "05B84B3A8FE2B96BBD222BC0324C34F7";
const uint8_t SpotifyTrack::binary_fingerprint[16] = {0x05,0xB8,0x4B,0x3A,0x8F,0xE2,0xB9,0x6B,0xBD,0x22,0x2B,0xC0,0x32,0x4C,0x34,0xF7};

uint32_t SpotifyTrack::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__id = false;
  bool isset__name = false;
  bool isset__artist = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          isset__id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_name);
          isset__name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_artist);
          isset__artist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_minutes);
          this->__isset._minutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_seconds);
          this->__isset._seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->_popularity);
          this->__isset._popularity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_genre);
          this->__isset._genre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->_starred);
          this->__isset._starred = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__artist)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SpotifyTrack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpotifyTrack");
  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_artist", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->_artist);
  xfer += oprot->writeFieldEnd();
  if (this->__isset._minutes) {
    xfer += oprot->writeFieldBegin("_minutes", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->_minutes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset._seconds) {
    xfer += oprot->writeFieldBegin("_seconds", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->_seconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset._popularity) {
    xfer += oprot->writeFieldBegin("_popularity", ::apache::thrift::protocol::T_BYTE, 6);
    xfer += oprot->writeByte(this->_popularity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset._genre) {
    xfer += oprot->writeFieldBegin("_genre", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->_genre);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset._starred) {
    xfer += oprot->writeFieldBegin("_starred", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->_starred);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SpotifySearch::ascii_fingerprint = "B2C950B9C25B62CA02C2A8C700FEE26F";
const uint8_t SpotifySearch::binary_fingerprint[16] = {0xB2,0xC9,0x50,0xB9,0xC2,0x5B,0x62,0xCA,0x02,0xC2,0xA8,0xC7,0x00,0xFE,0xE2,0x6F};

uint32_t SpotifySearch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->artist);
          this->__isset.artist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->album);
          this->__isset.album = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->track);
          this->__isset.track = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpotifySearch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpotifySearch");
  if (this->__isset.artist) {
    xfer += oprot->writeFieldBegin("artist", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->artist);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.album) {
    xfer += oprot->writeFieldBegin("album", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->album);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.track) {
    xfer += oprot->writeFieldBegin("track", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->track);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SpotifyCredential::ascii_fingerprint = "F4A50F0EC638C7F66026F9B6678FD89B";
const uint8_t SpotifyCredential::binary_fingerprint[16] = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

uint32_t SpotifyCredential::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset__username = false;
  bool isset__passwd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_username);
          isset__username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_passwd);
          isset__passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_uid);
          this->__isset._uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset__username)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset__passwd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SpotifyCredential::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpotifyCredential");
  xfer += oprot->writeFieldBegin("_username", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_username);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("_passwd", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_passwd);
  xfer += oprot->writeFieldEnd();
  if (this->__isset._uid) {
    xfer += oprot->writeFieldBegin("_uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->_uid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


