/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef spotify_TYPES_H
#define spotify_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct SpotifyCmd {
  enum type {
    PLAY = 1,
    PAUSE = 2,
    NEXT = 3,
    PREV = 4,
    RAND = 5,
    SINGLE = 6,
    LINEAR = 7,
    REPEAT_ONE = 8,
    REPEAT = 9
  };
};

extern const std::map<int, const char*> _SpotifyCmd_VALUES_TO_NAMES;

typedef std::set<std::string>  SpotifyPlaylistList;

typedef std::vector<class SpotifyTrack>  SpotifyPlaylist;

typedef std::map<std::string, SpotifyPlaylist>  SpotifyLibrary;

typedef std::map<std::string, class SpotifyCredential>  SpotifySessions;

typedef struct _SpotifyTrack__isset {
  _SpotifyTrack__isset() : _minutes(false), _seconds(false), _popularity(false), _genre(false), _starred(false) {}
  bool _minutes;
  bool _seconds;
  bool _popularity;
  bool _genre;
  bool _starred;
} _SpotifyTrack__isset;

class SpotifyTrack {
 public:

  static const char* ascii_fingerprint; // = "05B84B3A8FE2B96BBD222BC0324C34F7";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0xB8,0x4B,0x3A,0x8F,0xE2,0xB9,0x6B,0xBD,0x22,0x2B,0xC0,0x32,0x4C,0x34,0xF7};

  SpotifyTrack() : _id(0), _name(), _artist(), _minutes(0), _seconds(0), _popularity(0), _genre(), _starred(0) {
  }

  virtual ~SpotifyTrack() throw() {}

  int32_t _id;
  std::string _name;
  std::string _artist;
  int8_t _minutes;
  int8_t _seconds;
  int8_t _popularity;
  std::string _genre;
  bool _starred;

  _SpotifyTrack__isset __isset;

  void __set__id(const int32_t val) {
    _id = val;
  }

  void __set__name(const std::string& val) {
    _name = val;
  }

  void __set__artist(const std::string& val) {
    _artist = val;
  }

  void __set__minutes(const int8_t val) {
    _minutes = val;
    __isset._minutes = true;
  }

  void __set__seconds(const int8_t val) {
    _seconds = val;
    __isset._seconds = true;
  }

  void __set__popularity(const int8_t val) {
    _popularity = val;
    __isset._popularity = true;
  }

  void __set__genre(const std::string& val) {
    _genre = val;
    __isset._genre = true;
  }

  void __set__starred(const bool val) {
    _starred = val;
    __isset._starred = true;
  }

  bool operator == (const SpotifyTrack & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_name == rhs._name))
      return false;
    if (!(_artist == rhs._artist))
      return false;
    if (__isset._minutes != rhs.__isset._minutes)
      return false;
    else if (__isset._minutes && !(_minutes == rhs._minutes))
      return false;
    if (__isset._seconds != rhs.__isset._seconds)
      return false;
    else if (__isset._seconds && !(_seconds == rhs._seconds))
      return false;
    if (__isset._popularity != rhs.__isset._popularity)
      return false;
    else if (__isset._popularity && !(_popularity == rhs._popularity))
      return false;
    if (__isset._genre != rhs.__isset._genre)
      return false;
    else if (__isset._genre && !(_genre == rhs._genre))
      return false;
    if (__isset._starred != rhs.__isset._starred)
      return false;
    else if (__isset._starred && !(_starred == rhs._starred))
      return false;
    return true;
  }
  bool operator != (const SpotifyTrack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotifyTrack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpotifyTrack &a, SpotifyTrack &b);

typedef struct _SpotifySearch__isset {
  _SpotifySearch__isset() : artist(false), album(false), track(false) {}
  bool artist;
  bool album;
  bool track;
} _SpotifySearch__isset;

class SpotifySearch {
 public:

  static const char* ascii_fingerprint; // = "B2C950B9C25B62CA02C2A8C700FEE26F";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0xC9,0x50,0xB9,0xC2,0x5B,0x62,0xCA,0x02,0xC2,0xA8,0xC7,0x00,0xFE,0xE2,0x6F};

  SpotifySearch() : artist(), album(), track() {
  }

  virtual ~SpotifySearch() throw() {}

  std::string artist;
  std::string album;
  std::string track;

  _SpotifySearch__isset __isset;

  void __set_artist(const std::string& val) {
    artist = val;
    __isset.artist = true;
  }

  void __set_album(const std::string& val) {
    album = val;
    __isset.album = true;
  }

  void __set_track(const std::string& val) {
    track = val;
    __isset.track = true;
  }

  bool operator == (const SpotifySearch & rhs) const
  {
    if (__isset.artist != rhs.__isset.artist)
      return false;
    else if (__isset.artist && !(artist == rhs.artist))
      return false;
    if (__isset.album != rhs.__isset.album)
      return false;
    else if (__isset.album && !(album == rhs.album))
      return false;
    if (__isset.track != rhs.__isset.track)
      return false;
    else if (__isset.track && !(track == rhs.track))
      return false;
    return true;
  }
  bool operator != (const SpotifySearch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotifySearch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpotifySearch &a, SpotifySearch &b);

typedef struct _SpotifyCredential__isset {
  _SpotifyCredential__isset() : _uuid(false) {}
  bool _uuid;
} _SpotifyCredential__isset;

class SpotifyCredential {
 public:

  static const char* ascii_fingerprint; // = "F4A50F0EC638C7F66026F9B6678FD89B";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

  SpotifyCredential() : _username(), _passwd(), _uuid() {
  }

  virtual ~SpotifyCredential() throw() {}

  std::string _username;
  std::string _passwd;
  std::string _uuid;

  _SpotifyCredential__isset __isset;

  void __set__username(const std::string& val) {
    _username = val;
  }

  void __set__passwd(const std::string& val) {
    _passwd = val;
  }

  void __set__uuid(const std::string& val) {
    _uuid = val;
    __isset._uuid = true;
  }

  bool operator == (const SpotifyCredential & rhs) const
  {
    if (!(_username == rhs._username))
      return false;
    if (!(_passwd == rhs._passwd))
      return false;
    if (__isset._uuid != rhs.__isset._uuid)
      return false;
    else if (__isset._uuid && !(_uuid == rhs._uuid))
      return false;
    return true;
  }
  bool operator != (const SpotifyCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotifyCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpotifyCredential &a, SpotifyCredential &b);



#endif
