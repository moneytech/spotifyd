/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Spotify_H
#define Spotify_H

#include <thrift/TDispatchProcessor.h>
#include "spotify_types.h"



class SpotifyIf {
 public:
  virtual ~SpotifyIf() {}
  virtual void check_in(SpotifyCredential& _return, const SpotifyCredential& cred) = 0;
  virtual bool check_out(const SpotifyCredential& cred) = 0;
  virtual bool loginSession(const SpotifyCredential& cred) = 0;
  virtual bool isLoggedIn(const SpotifyCredential& cred) = 0;
  virtual int64_t getStateTS(const SpotifyCredential& cred) = 0;
  virtual int64_t getSessionStateTS(const SpotifyCredential& cred) = 0;
  virtual void logoutSession(const SpotifyCredential& cred) = 0;
  virtual void sendCommand(const SpotifyCredential& cred, const SpotifyCmd::type cmd) = 0;
  virtual void search(SpotifyPlaylist& _return, const SpotifyCredential& cred, const SpotifySearch& criteria) = 0;
  virtual void getPlaylists(SpotifyPlaylistList& _return, const SpotifyCredential& cred) = 0;
  virtual void getPlaylist(SpotifyPlaylist& _return, const SpotifyCredential& cred, const int32_t plist_id) = 0;
  virtual void getPlaylistByName(SpotifyPlaylist& _return, const SpotifyCredential& cred, const std::string& name) = 0;
  virtual void selectPlaylist(const SpotifyCredential& cred, const std::string& playlist) = 0;
  virtual void selectPlaylistById(const SpotifyCredential& cred, const int32_t plist_id) = 0;
  virtual void selectTrack(const SpotifyCredential& cred, const std::string& track) = 0;
  virtual void selectTrackById(const SpotifyCredential& cred, const int32_t track_id) = 0;
  virtual bool merge2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyPlaylist& tracks) = 0;
  virtual bool add2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyTrack& track) = 0;
  virtual void whats_playing(SpotifyTrack& _return) = 0;
};

class SpotifyIfFactory {
 public:
  typedef SpotifyIf Handler;

  virtual ~SpotifyIfFactory() {}

  virtual SpotifyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SpotifyIf* /* handler */) = 0;
};

class SpotifyIfSingletonFactory : virtual public SpotifyIfFactory {
 public:
  SpotifyIfSingletonFactory(const boost::shared_ptr<SpotifyIf>& iface) : iface_(iface) {}
  virtual ~SpotifyIfSingletonFactory() {}

  virtual SpotifyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SpotifyIf* /* handler */) {}

 protected:
  boost::shared_ptr<SpotifyIf> iface_;
};

class SpotifyNull : virtual public SpotifyIf {
 public:
  virtual ~SpotifyNull() {}
  void check_in(SpotifyCredential& /* _return */, const SpotifyCredential& /* cred */) {
    return;
  }
  bool check_out(const SpotifyCredential& /* cred */) {
    bool _return = false;
    return _return;
  }
  bool loginSession(const SpotifyCredential& /* cred */) {
    bool _return = false;
    return _return;
  }
  bool isLoggedIn(const SpotifyCredential& /* cred */) {
    bool _return = false;
    return _return;
  }
  int64_t getStateTS(const SpotifyCredential& /* cred */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t getSessionStateTS(const SpotifyCredential& /* cred */) {
    int64_t _return = 0;
    return _return;
  }
  void logoutSession(const SpotifyCredential& /* cred */) {
    return;
  }
  void sendCommand(const SpotifyCredential& /* cred */, const SpotifyCmd::type /* cmd */) {
    return;
  }
  void search(SpotifyPlaylist& /* _return */, const SpotifyCredential& /* cred */, const SpotifySearch& /* criteria */) {
    return;
  }
  void getPlaylists(SpotifyPlaylistList& /* _return */, const SpotifyCredential& /* cred */) {
    return;
  }
  void getPlaylist(SpotifyPlaylist& /* _return */, const SpotifyCredential& /* cred */, const int32_t /* plist_id */) {
    return;
  }
  void getPlaylistByName(SpotifyPlaylist& /* _return */, const SpotifyCredential& /* cred */, const std::string& /* name */) {
    return;
  }
  void selectPlaylist(const SpotifyCredential& /* cred */, const std::string& /* playlist */) {
    return;
  }
  void selectPlaylistById(const SpotifyCredential& /* cred */, const int32_t /* plist_id */) {
    return;
  }
  void selectTrack(const SpotifyCredential& /* cred */, const std::string& /* track */) {
    return;
  }
  void selectTrackById(const SpotifyCredential& /* cred */, const int32_t /* track_id */) {
    return;
  }
  bool merge2playlist(const SpotifyCredential& /* cred */, const std::string& /* pl */, const SpotifyPlaylist& /* tracks */) {
    bool _return = false;
    return _return;
  }
  bool add2playlist(const SpotifyCredential& /* cred */, const std::string& /* pl */, const SpotifyTrack& /* track */) {
    bool _return = false;
    return _return;
  }
  void whats_playing(SpotifyTrack& /* _return */) {
    return;
  }
};

typedef struct _Spotify_check_in_args__isset {
  _Spotify_check_in_args__isset() : cred(false) {}
  bool cred;
} _Spotify_check_in_args__isset;

class Spotify_check_in_args {
 public:

  Spotify_check_in_args() {
  }

  virtual ~Spotify_check_in_args() throw() {}

  SpotifyCredential cred;

  _Spotify_check_in_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_check_in_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_check_in_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_check_in_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_check_in_pargs {
 public:


  virtual ~Spotify_check_in_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_check_in_result__isset {
  _Spotify_check_in_result__isset() : success(false) {}
  bool success;
} _Spotify_check_in_result__isset;

class Spotify_check_in_result {
 public:

  Spotify_check_in_result() {
  }

  virtual ~Spotify_check_in_result() throw() {}

  SpotifyCredential success;

  _Spotify_check_in_result__isset __isset;

  void __set_success(const SpotifyCredential& val) {
    success = val;
  }

  bool operator == (const Spotify_check_in_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_check_in_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_check_in_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_check_in_presult__isset {
  _Spotify_check_in_presult__isset() : success(false) {}
  bool success;
} _Spotify_check_in_presult__isset;

class Spotify_check_in_presult {
 public:


  virtual ~Spotify_check_in_presult() throw() {}

  SpotifyCredential* success;

  _Spotify_check_in_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_check_out_args__isset {
  _Spotify_check_out_args__isset() : cred(false) {}
  bool cred;
} _Spotify_check_out_args__isset;

class Spotify_check_out_args {
 public:

  Spotify_check_out_args() {
  }

  virtual ~Spotify_check_out_args() throw() {}

  SpotifyCredential cred;

  _Spotify_check_out_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_check_out_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_check_out_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_check_out_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_check_out_pargs {
 public:


  virtual ~Spotify_check_out_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_check_out_result__isset {
  _Spotify_check_out_result__isset() : success(false) {}
  bool success;
} _Spotify_check_out_result__isset;

class Spotify_check_out_result {
 public:

  Spotify_check_out_result() : success(0) {
  }

  virtual ~Spotify_check_out_result() throw() {}

  bool success;

  _Spotify_check_out_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Spotify_check_out_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_check_out_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_check_out_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_check_out_presult__isset {
  _Spotify_check_out_presult__isset() : success(false) {}
  bool success;
} _Spotify_check_out_presult__isset;

class Spotify_check_out_presult {
 public:


  virtual ~Spotify_check_out_presult() throw() {}

  bool* success;

  _Spotify_check_out_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_loginSession_args__isset {
  _Spotify_loginSession_args__isset() : cred(false) {}
  bool cred;
} _Spotify_loginSession_args__isset;

class Spotify_loginSession_args {
 public:

  Spotify_loginSession_args() {
  }

  virtual ~Spotify_loginSession_args() throw() {}

  SpotifyCredential cred;

  _Spotify_loginSession_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_loginSession_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_loginSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_loginSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_loginSession_pargs {
 public:


  virtual ~Spotify_loginSession_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_loginSession_result__isset {
  _Spotify_loginSession_result__isset() : success(false) {}
  bool success;
} _Spotify_loginSession_result__isset;

class Spotify_loginSession_result {
 public:

  Spotify_loginSession_result() : success(0) {
  }

  virtual ~Spotify_loginSession_result() throw() {}

  bool success;

  _Spotify_loginSession_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Spotify_loginSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_loginSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_loginSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_loginSession_presult__isset {
  _Spotify_loginSession_presult__isset() : success(false) {}
  bool success;
} _Spotify_loginSession_presult__isset;

class Spotify_loginSession_presult {
 public:


  virtual ~Spotify_loginSession_presult() throw() {}

  bool* success;

  _Spotify_loginSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_isLoggedIn_args__isset {
  _Spotify_isLoggedIn_args__isset() : cred(false) {}
  bool cred;
} _Spotify_isLoggedIn_args__isset;

class Spotify_isLoggedIn_args {
 public:

  Spotify_isLoggedIn_args() {
  }

  virtual ~Spotify_isLoggedIn_args() throw() {}

  SpotifyCredential cred;

  _Spotify_isLoggedIn_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_isLoggedIn_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_isLoggedIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_isLoggedIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_isLoggedIn_pargs {
 public:


  virtual ~Spotify_isLoggedIn_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_isLoggedIn_result__isset {
  _Spotify_isLoggedIn_result__isset() : success(false) {}
  bool success;
} _Spotify_isLoggedIn_result__isset;

class Spotify_isLoggedIn_result {
 public:

  Spotify_isLoggedIn_result() : success(0) {
  }

  virtual ~Spotify_isLoggedIn_result() throw() {}

  bool success;

  _Spotify_isLoggedIn_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Spotify_isLoggedIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_isLoggedIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_isLoggedIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_isLoggedIn_presult__isset {
  _Spotify_isLoggedIn_presult__isset() : success(false) {}
  bool success;
} _Spotify_isLoggedIn_presult__isset;

class Spotify_isLoggedIn_presult {
 public:


  virtual ~Spotify_isLoggedIn_presult() throw() {}

  bool* success;

  _Spotify_isLoggedIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_getStateTS_args__isset {
  _Spotify_getStateTS_args__isset() : cred(false) {}
  bool cred;
} _Spotify_getStateTS_args__isset;

class Spotify_getStateTS_args {
 public:

  Spotify_getStateTS_args() {
  }

  virtual ~Spotify_getStateTS_args() throw() {}

  SpotifyCredential cred;

  _Spotify_getStateTS_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_getStateTS_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_getStateTS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getStateTS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_getStateTS_pargs {
 public:


  virtual ~Spotify_getStateTS_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getStateTS_result__isset {
  _Spotify_getStateTS_result__isset() : success(false) {}
  bool success;
} _Spotify_getStateTS_result__isset;

class Spotify_getStateTS_result {
 public:

  Spotify_getStateTS_result() : success(0) {
  }

  virtual ~Spotify_getStateTS_result() throw() {}

  int64_t success;

  _Spotify_getStateTS_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const Spotify_getStateTS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_getStateTS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getStateTS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getStateTS_presult__isset {
  _Spotify_getStateTS_presult__isset() : success(false) {}
  bool success;
} _Spotify_getStateTS_presult__isset;

class Spotify_getStateTS_presult {
 public:


  virtual ~Spotify_getStateTS_presult() throw() {}

  int64_t* success;

  _Spotify_getStateTS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_getSessionStateTS_args__isset {
  _Spotify_getSessionStateTS_args__isset() : cred(false) {}
  bool cred;
} _Spotify_getSessionStateTS_args__isset;

class Spotify_getSessionStateTS_args {
 public:

  Spotify_getSessionStateTS_args() {
  }

  virtual ~Spotify_getSessionStateTS_args() throw() {}

  SpotifyCredential cred;

  _Spotify_getSessionStateTS_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_getSessionStateTS_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_getSessionStateTS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getSessionStateTS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_getSessionStateTS_pargs {
 public:


  virtual ~Spotify_getSessionStateTS_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getSessionStateTS_result__isset {
  _Spotify_getSessionStateTS_result__isset() : success(false) {}
  bool success;
} _Spotify_getSessionStateTS_result__isset;

class Spotify_getSessionStateTS_result {
 public:

  Spotify_getSessionStateTS_result() : success(0) {
  }

  virtual ~Spotify_getSessionStateTS_result() throw() {}

  int64_t success;

  _Spotify_getSessionStateTS_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const Spotify_getSessionStateTS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_getSessionStateTS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getSessionStateTS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getSessionStateTS_presult__isset {
  _Spotify_getSessionStateTS_presult__isset() : success(false) {}
  bool success;
} _Spotify_getSessionStateTS_presult__isset;

class Spotify_getSessionStateTS_presult {
 public:


  virtual ~Spotify_getSessionStateTS_presult() throw() {}

  int64_t* success;

  _Spotify_getSessionStateTS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_logoutSession_args__isset {
  _Spotify_logoutSession_args__isset() : cred(false) {}
  bool cred;
} _Spotify_logoutSession_args__isset;

class Spotify_logoutSession_args {
 public:

  Spotify_logoutSession_args() {
  }

  virtual ~Spotify_logoutSession_args() throw() {}

  SpotifyCredential cred;

  _Spotify_logoutSession_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_logoutSession_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_logoutSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_logoutSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_logoutSession_pargs {
 public:


  virtual ~Spotify_logoutSession_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_sendCommand_args__isset {
  _Spotify_sendCommand_args__isset() : cred(false), cmd(false) {}
  bool cred;
  bool cmd;
} _Spotify_sendCommand_args__isset;

class Spotify_sendCommand_args {
 public:

  Spotify_sendCommand_args() : cmd((SpotifyCmd::type)0) {
  }

  virtual ~Spotify_sendCommand_args() throw() {}

  SpotifyCredential cred;
  SpotifyCmd::type cmd;

  _Spotify_sendCommand_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_cmd(const SpotifyCmd::type val) {
    cmd = val;
  }

  bool operator == (const Spotify_sendCommand_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const Spotify_sendCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_sendCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_sendCommand_pargs {
 public:


  virtual ~Spotify_sendCommand_pargs() throw() {}

  const SpotifyCredential* cred;
  const SpotifyCmd::type* cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_search_args__isset {
  _Spotify_search_args__isset() : cred(false), criteria(false) {}
  bool cred;
  bool criteria;
} _Spotify_search_args__isset;

class Spotify_search_args {
 public:

  Spotify_search_args() {
  }

  virtual ~Spotify_search_args() throw() {}

  SpotifyCredential cred;
  SpotifySearch criteria;

  _Spotify_search_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_criteria(const SpotifySearch& val) {
    criteria = val;
  }

  bool operator == (const Spotify_search_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(criteria == rhs.criteria))
      return false;
    return true;
  }
  bool operator != (const Spotify_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_search_pargs {
 public:


  virtual ~Spotify_search_pargs() throw() {}

  const SpotifyCredential* cred;
  const SpotifySearch* criteria;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_search_result__isset {
  _Spotify_search_result__isset() : success(false) {}
  bool success;
} _Spotify_search_result__isset;

class Spotify_search_result {
 public:

  Spotify_search_result() {
  }

  virtual ~Spotify_search_result() throw() {}

  SpotifyPlaylist success;

  _Spotify_search_result__isset __isset;

  void __set_success(const SpotifyPlaylist& val) {
    success = val;
  }

  bool operator == (const Spotify_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_search_presult__isset {
  _Spotify_search_presult__isset() : success(false) {}
  bool success;
} _Spotify_search_presult__isset;

class Spotify_search_presult {
 public:


  virtual ~Spotify_search_presult() throw() {}

  SpotifyPlaylist* success;

  _Spotify_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_getPlaylists_args__isset {
  _Spotify_getPlaylists_args__isset() : cred(false) {}
  bool cred;
} _Spotify_getPlaylists_args__isset;

class Spotify_getPlaylists_args {
 public:

  Spotify_getPlaylists_args() {
  }

  virtual ~Spotify_getPlaylists_args() throw() {}

  SpotifyCredential cred;

  _Spotify_getPlaylists_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  bool operator == (const Spotify_getPlaylists_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_getPlaylists_pargs {
 public:


  virtual ~Spotify_getPlaylists_pargs() throw() {}

  const SpotifyCredential* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylists_result__isset {
  _Spotify_getPlaylists_result__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylists_result__isset;

class Spotify_getPlaylists_result {
 public:

  Spotify_getPlaylists_result() {
  }

  virtual ~Spotify_getPlaylists_result() throw() {}

  SpotifyPlaylistList success;

  _Spotify_getPlaylists_result__isset __isset;

  void __set_success(const SpotifyPlaylistList& val) {
    success = val;
  }

  bool operator == (const Spotify_getPlaylists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylists_presult__isset {
  _Spotify_getPlaylists_presult__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylists_presult__isset;

class Spotify_getPlaylists_presult {
 public:


  virtual ~Spotify_getPlaylists_presult() throw() {}

  SpotifyPlaylistList* success;

  _Spotify_getPlaylists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_getPlaylist_args__isset {
  _Spotify_getPlaylist_args__isset() : cred(false), plist_id(false) {}
  bool cred;
  bool plist_id;
} _Spotify_getPlaylist_args__isset;

class Spotify_getPlaylist_args {
 public:

  Spotify_getPlaylist_args() : plist_id(0) {
  }

  virtual ~Spotify_getPlaylist_args() throw() {}

  SpotifyCredential cred;
  int32_t plist_id;

  _Spotify_getPlaylist_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_plist_id(const int32_t val) {
    plist_id = val;
  }

  bool operator == (const Spotify_getPlaylist_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(plist_id == rhs.plist_id))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_getPlaylist_pargs {
 public:


  virtual ~Spotify_getPlaylist_pargs() throw() {}

  const SpotifyCredential* cred;
  const int32_t* plist_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylist_result__isset {
  _Spotify_getPlaylist_result__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylist_result__isset;

class Spotify_getPlaylist_result {
 public:

  Spotify_getPlaylist_result() {
  }

  virtual ~Spotify_getPlaylist_result() throw() {}

  SpotifyPlaylist success;

  _Spotify_getPlaylist_result__isset __isset;

  void __set_success(const SpotifyPlaylist& val) {
    success = val;
  }

  bool operator == (const Spotify_getPlaylist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylist_presult__isset {
  _Spotify_getPlaylist_presult__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylist_presult__isset;

class Spotify_getPlaylist_presult {
 public:


  virtual ~Spotify_getPlaylist_presult() throw() {}

  SpotifyPlaylist* success;

  _Spotify_getPlaylist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_getPlaylistByName_args__isset {
  _Spotify_getPlaylistByName_args__isset() : cred(false), name(false) {}
  bool cred;
  bool name;
} _Spotify_getPlaylistByName_args__isset;

class Spotify_getPlaylistByName_args {
 public:

  Spotify_getPlaylistByName_args() : name() {
  }

  virtual ~Spotify_getPlaylistByName_args() throw() {}

  SpotifyCredential cred;
  std::string name;

  _Spotify_getPlaylistByName_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Spotify_getPlaylistByName_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylistByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylistByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_getPlaylistByName_pargs {
 public:


  virtual ~Spotify_getPlaylistByName_pargs() throw() {}

  const SpotifyCredential* cred;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylistByName_result__isset {
  _Spotify_getPlaylistByName_result__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylistByName_result__isset;

class Spotify_getPlaylistByName_result {
 public:

  Spotify_getPlaylistByName_result() {
  }

  virtual ~Spotify_getPlaylistByName_result() throw() {}

  SpotifyPlaylist success;

  _Spotify_getPlaylistByName_result__isset __isset;

  void __set_success(const SpotifyPlaylist& val) {
    success = val;
  }

  bool operator == (const Spotify_getPlaylistByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_getPlaylistByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_getPlaylistByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_getPlaylistByName_presult__isset {
  _Spotify_getPlaylistByName_presult__isset() : success(false) {}
  bool success;
} _Spotify_getPlaylistByName_presult__isset;

class Spotify_getPlaylistByName_presult {
 public:


  virtual ~Spotify_getPlaylistByName_presult() throw() {}

  SpotifyPlaylist* success;

  _Spotify_getPlaylistByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_selectPlaylist_args__isset {
  _Spotify_selectPlaylist_args__isset() : cred(false), playlist(false) {}
  bool cred;
  bool playlist;
} _Spotify_selectPlaylist_args__isset;

class Spotify_selectPlaylist_args {
 public:

  Spotify_selectPlaylist_args() : playlist() {
  }

  virtual ~Spotify_selectPlaylist_args() throw() {}

  SpotifyCredential cred;
  std::string playlist;

  _Spotify_selectPlaylist_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_playlist(const std::string& val) {
    playlist = val;
  }

  bool operator == (const Spotify_selectPlaylist_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(playlist == rhs.playlist))
      return false;
    return true;
  }
  bool operator != (const Spotify_selectPlaylist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_selectPlaylist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_selectPlaylist_pargs {
 public:


  virtual ~Spotify_selectPlaylist_pargs() throw() {}

  const SpotifyCredential* cred;
  const std::string* playlist;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_selectPlaylistById_args__isset {
  _Spotify_selectPlaylistById_args__isset() : cred(false), plist_id(false) {}
  bool cred;
  bool plist_id;
} _Spotify_selectPlaylistById_args__isset;

class Spotify_selectPlaylistById_args {
 public:

  Spotify_selectPlaylistById_args() : plist_id(0) {
  }

  virtual ~Spotify_selectPlaylistById_args() throw() {}

  SpotifyCredential cred;
  int32_t plist_id;

  _Spotify_selectPlaylistById_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_plist_id(const int32_t val) {
    plist_id = val;
  }

  bool operator == (const Spotify_selectPlaylistById_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(plist_id == rhs.plist_id))
      return false;
    return true;
  }
  bool operator != (const Spotify_selectPlaylistById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_selectPlaylistById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_selectPlaylistById_pargs {
 public:


  virtual ~Spotify_selectPlaylistById_pargs() throw() {}

  const SpotifyCredential* cred;
  const int32_t* plist_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_selectTrack_args__isset {
  _Spotify_selectTrack_args__isset() : cred(false), track(false) {}
  bool cred;
  bool track;
} _Spotify_selectTrack_args__isset;

class Spotify_selectTrack_args {
 public:

  Spotify_selectTrack_args() : track() {
  }

  virtual ~Spotify_selectTrack_args() throw() {}

  SpotifyCredential cred;
  std::string track;

  _Spotify_selectTrack_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_track(const std::string& val) {
    track = val;
  }

  bool operator == (const Spotify_selectTrack_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(track == rhs.track))
      return false;
    return true;
  }
  bool operator != (const Spotify_selectTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_selectTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_selectTrack_pargs {
 public:


  virtual ~Spotify_selectTrack_pargs() throw() {}

  const SpotifyCredential* cred;
  const std::string* track;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_selectTrackById_args__isset {
  _Spotify_selectTrackById_args__isset() : cred(false), track_id(false) {}
  bool cred;
  bool track_id;
} _Spotify_selectTrackById_args__isset;

class Spotify_selectTrackById_args {
 public:

  Spotify_selectTrackById_args() : track_id(0) {
  }

  virtual ~Spotify_selectTrackById_args() throw() {}

  SpotifyCredential cred;
  int32_t track_id;

  _Spotify_selectTrackById_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_track_id(const int32_t val) {
    track_id = val;
  }

  bool operator == (const Spotify_selectTrackById_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(track_id == rhs.track_id))
      return false;
    return true;
  }
  bool operator != (const Spotify_selectTrackById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_selectTrackById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_selectTrackById_pargs {
 public:


  virtual ~Spotify_selectTrackById_pargs() throw() {}

  const SpotifyCredential* cred;
  const int32_t* track_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_merge2playlist_args__isset {
  _Spotify_merge2playlist_args__isset() : cred(false), pl(false), tracks(false) {}
  bool cred;
  bool pl;
  bool tracks;
} _Spotify_merge2playlist_args__isset;

class Spotify_merge2playlist_args {
 public:

  Spotify_merge2playlist_args() : pl() {
  }

  virtual ~Spotify_merge2playlist_args() throw() {}

  SpotifyCredential cred;
  std::string pl;
  SpotifyPlaylist tracks;

  _Spotify_merge2playlist_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_pl(const std::string& val) {
    pl = val;
  }

  void __set_tracks(const SpotifyPlaylist& val) {
    tracks = val;
  }

  bool operator == (const Spotify_merge2playlist_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(pl == rhs.pl))
      return false;
    if (!(tracks == rhs.tracks))
      return false;
    return true;
  }
  bool operator != (const Spotify_merge2playlist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_merge2playlist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_merge2playlist_pargs {
 public:


  virtual ~Spotify_merge2playlist_pargs() throw() {}

  const SpotifyCredential* cred;
  const std::string* pl;
  const SpotifyPlaylist* tracks;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_merge2playlist_result__isset {
  _Spotify_merge2playlist_result__isset() : success(false) {}
  bool success;
} _Spotify_merge2playlist_result__isset;

class Spotify_merge2playlist_result {
 public:

  Spotify_merge2playlist_result() : success(0) {
  }

  virtual ~Spotify_merge2playlist_result() throw() {}

  bool success;

  _Spotify_merge2playlist_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Spotify_merge2playlist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_merge2playlist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_merge2playlist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_merge2playlist_presult__isset {
  _Spotify_merge2playlist_presult__isset() : success(false) {}
  bool success;
} _Spotify_merge2playlist_presult__isset;

class Spotify_merge2playlist_presult {
 public:


  virtual ~Spotify_merge2playlist_presult() throw() {}

  bool* success;

  _Spotify_merge2playlist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Spotify_add2playlist_args__isset {
  _Spotify_add2playlist_args__isset() : cred(false), pl(false), track(false) {}
  bool cred;
  bool pl;
  bool track;
} _Spotify_add2playlist_args__isset;

class Spotify_add2playlist_args {
 public:

  Spotify_add2playlist_args() : pl() {
  }

  virtual ~Spotify_add2playlist_args() throw() {}

  SpotifyCredential cred;
  std::string pl;
  SpotifyTrack track;

  _Spotify_add2playlist_args__isset __isset;

  void __set_cred(const SpotifyCredential& val) {
    cred = val;
  }

  void __set_pl(const std::string& val) {
    pl = val;
  }

  void __set_track(const SpotifyTrack& val) {
    track = val;
  }

  bool operator == (const Spotify_add2playlist_args & rhs) const
  {
    if (!(cred == rhs.cred))
      return false;
    if (!(pl == rhs.pl))
      return false;
    if (!(track == rhs.track))
      return false;
    return true;
  }
  bool operator != (const Spotify_add2playlist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_add2playlist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_add2playlist_pargs {
 public:


  virtual ~Spotify_add2playlist_pargs() throw() {}

  const SpotifyCredential* cred;
  const std::string* pl;
  const SpotifyTrack* track;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_add2playlist_result__isset {
  _Spotify_add2playlist_result__isset() : success(false) {}
  bool success;
} _Spotify_add2playlist_result__isset;

class Spotify_add2playlist_result {
 public:

  Spotify_add2playlist_result() : success(0) {
  }

  virtual ~Spotify_add2playlist_result() throw() {}

  bool success;

  _Spotify_add2playlist_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Spotify_add2playlist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_add2playlist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_add2playlist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_add2playlist_presult__isset {
  _Spotify_add2playlist_presult__isset() : success(false) {}
  bool success;
} _Spotify_add2playlist_presult__isset;

class Spotify_add2playlist_presult {
 public:


  virtual ~Spotify_add2playlist_presult() throw() {}

  bool* success;

  _Spotify_add2playlist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Spotify_whats_playing_args {
 public:

  Spotify_whats_playing_args() {
  }

  virtual ~Spotify_whats_playing_args() throw() {}


  bool operator == (const Spotify_whats_playing_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Spotify_whats_playing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_whats_playing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spotify_whats_playing_pargs {
 public:


  virtual ~Spotify_whats_playing_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_whats_playing_result__isset {
  _Spotify_whats_playing_result__isset() : success(false) {}
  bool success;
} _Spotify_whats_playing_result__isset;

class Spotify_whats_playing_result {
 public:

  Spotify_whats_playing_result() {
  }

  virtual ~Spotify_whats_playing_result() throw() {}

  SpotifyTrack success;

  _Spotify_whats_playing_result__isset __isset;

  void __set_success(const SpotifyTrack& val) {
    success = val;
  }

  bool operator == (const Spotify_whats_playing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Spotify_whats_playing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spotify_whats_playing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Spotify_whats_playing_presult__isset {
  _Spotify_whats_playing_presult__isset() : success(false) {}
  bool success;
} _Spotify_whats_playing_presult__isset;

class Spotify_whats_playing_presult {
 public:


  virtual ~Spotify_whats_playing_presult() throw() {}

  SpotifyTrack* success;

  _Spotify_whats_playing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SpotifyClient : virtual public SpotifyIf {
 public:
  SpotifyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SpotifyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void check_in(SpotifyCredential& _return, const SpotifyCredential& cred);
  void send_check_in(const SpotifyCredential& cred);
  void recv_check_in(SpotifyCredential& _return);
  bool check_out(const SpotifyCredential& cred);
  void send_check_out(const SpotifyCredential& cred);
  bool recv_check_out();
  bool loginSession(const SpotifyCredential& cred);
  void send_loginSession(const SpotifyCredential& cred);
  bool recv_loginSession();
  bool isLoggedIn(const SpotifyCredential& cred);
  void send_isLoggedIn(const SpotifyCredential& cred);
  bool recv_isLoggedIn();
  int64_t getStateTS(const SpotifyCredential& cred);
  void send_getStateTS(const SpotifyCredential& cred);
  int64_t recv_getStateTS();
  int64_t getSessionStateTS(const SpotifyCredential& cred);
  void send_getSessionStateTS(const SpotifyCredential& cred);
  int64_t recv_getSessionStateTS();
  void logoutSession(const SpotifyCredential& cred);
  void send_logoutSession(const SpotifyCredential& cred);
  void sendCommand(const SpotifyCredential& cred, const SpotifyCmd::type cmd);
  void send_sendCommand(const SpotifyCredential& cred, const SpotifyCmd::type cmd);
  void search(SpotifyPlaylist& _return, const SpotifyCredential& cred, const SpotifySearch& criteria);
  void send_search(const SpotifyCredential& cred, const SpotifySearch& criteria);
  void recv_search(SpotifyPlaylist& _return);
  void getPlaylists(SpotifyPlaylistList& _return, const SpotifyCredential& cred);
  void send_getPlaylists(const SpotifyCredential& cred);
  void recv_getPlaylists(SpotifyPlaylistList& _return);
  void getPlaylist(SpotifyPlaylist& _return, const SpotifyCredential& cred, const int32_t plist_id);
  void send_getPlaylist(const SpotifyCredential& cred, const int32_t plist_id);
  void recv_getPlaylist(SpotifyPlaylist& _return);
  void getPlaylistByName(SpotifyPlaylist& _return, const SpotifyCredential& cred, const std::string& name);
  void send_getPlaylistByName(const SpotifyCredential& cred, const std::string& name);
  void recv_getPlaylistByName(SpotifyPlaylist& _return);
  void selectPlaylist(const SpotifyCredential& cred, const std::string& playlist);
  void send_selectPlaylist(const SpotifyCredential& cred, const std::string& playlist);
  void selectPlaylistById(const SpotifyCredential& cred, const int32_t plist_id);
  void send_selectPlaylistById(const SpotifyCredential& cred, const int32_t plist_id);
  void selectTrack(const SpotifyCredential& cred, const std::string& track);
  void send_selectTrack(const SpotifyCredential& cred, const std::string& track);
  void selectTrackById(const SpotifyCredential& cred, const int32_t track_id);
  void send_selectTrackById(const SpotifyCredential& cred, const int32_t track_id);
  bool merge2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyPlaylist& tracks);
  void send_merge2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyPlaylist& tracks);
  bool recv_merge2playlist();
  bool add2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyTrack& track);
  void send_add2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyTrack& track);
  bool recv_add2playlist();
  void whats_playing(SpotifyTrack& _return);
  void send_whats_playing();
  void recv_whats_playing(SpotifyTrack& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpotifyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SpotifyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SpotifyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_check_in(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_out(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isLoggedIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStateTS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSessionStateTS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logoutSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPlaylists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPlaylist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPlaylistByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectPlaylist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectPlaylistById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_selectTrackById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_merge2playlist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add2playlist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_whats_playing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SpotifyProcessor(boost::shared_ptr<SpotifyIf> iface) :
    iface_(iface) {
    processMap_["check_in"] = &SpotifyProcessor::process_check_in;
    processMap_["check_out"] = &SpotifyProcessor::process_check_out;
    processMap_["loginSession"] = &SpotifyProcessor::process_loginSession;
    processMap_["isLoggedIn"] = &SpotifyProcessor::process_isLoggedIn;
    processMap_["getStateTS"] = &SpotifyProcessor::process_getStateTS;
    processMap_["getSessionStateTS"] = &SpotifyProcessor::process_getSessionStateTS;
    processMap_["logoutSession"] = &SpotifyProcessor::process_logoutSession;
    processMap_["sendCommand"] = &SpotifyProcessor::process_sendCommand;
    processMap_["search"] = &SpotifyProcessor::process_search;
    processMap_["getPlaylists"] = &SpotifyProcessor::process_getPlaylists;
    processMap_["getPlaylist"] = &SpotifyProcessor::process_getPlaylist;
    processMap_["getPlaylistByName"] = &SpotifyProcessor::process_getPlaylistByName;
    processMap_["selectPlaylist"] = &SpotifyProcessor::process_selectPlaylist;
    processMap_["selectPlaylistById"] = &SpotifyProcessor::process_selectPlaylistById;
    processMap_["selectTrack"] = &SpotifyProcessor::process_selectTrack;
    processMap_["selectTrackById"] = &SpotifyProcessor::process_selectTrackById;
    processMap_["merge2playlist"] = &SpotifyProcessor::process_merge2playlist;
    processMap_["add2playlist"] = &SpotifyProcessor::process_add2playlist;
    processMap_["whats_playing"] = &SpotifyProcessor::process_whats_playing;
  }

  virtual ~SpotifyProcessor() {}
};

class SpotifyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SpotifyProcessorFactory(const ::boost::shared_ptr< SpotifyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SpotifyIfFactory > handlerFactory_;
};

class SpotifyMultiface : virtual public SpotifyIf {
 public:
  SpotifyMultiface(std::vector<boost::shared_ptr<SpotifyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpotifyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SpotifyIf> > ifaces_;
  SpotifyMultiface() {}
  void add(boost::shared_ptr<SpotifyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void check_in(SpotifyCredential& _return, const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_in(_return, cred);
    }
    ifaces_[i]->check_in(_return, cred);
    return;
  }

  bool check_out(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_out(cred);
    }
    return ifaces_[i]->check_out(cred);
  }

  bool loginSession(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginSession(cred);
    }
    return ifaces_[i]->loginSession(cred);
  }

  bool isLoggedIn(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isLoggedIn(cred);
    }
    return ifaces_[i]->isLoggedIn(cred);
  }

  int64_t getStateTS(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStateTS(cred);
    }
    return ifaces_[i]->getStateTS(cred);
  }

  int64_t getSessionStateTS(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSessionStateTS(cred);
    }
    return ifaces_[i]->getSessionStateTS(cred);
  }

  void logoutSession(const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logoutSession(cred);
    }
    ifaces_[i]->logoutSession(cred);
  }

  void sendCommand(const SpotifyCredential& cred, const SpotifyCmd::type cmd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCommand(cred, cmd);
    }
    ifaces_[i]->sendCommand(cred, cmd);
  }

  void search(SpotifyPlaylist& _return, const SpotifyCredential& cred, const SpotifySearch& criteria) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, cred, criteria);
    }
    ifaces_[i]->search(_return, cred, criteria);
    return;
  }

  void getPlaylists(SpotifyPlaylistList& _return, const SpotifyCredential& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPlaylists(_return, cred);
    }
    ifaces_[i]->getPlaylists(_return, cred);
    return;
  }

  void getPlaylist(SpotifyPlaylist& _return, const SpotifyCredential& cred, const int32_t plist_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPlaylist(_return, cred, plist_id);
    }
    ifaces_[i]->getPlaylist(_return, cred, plist_id);
    return;
  }

  void getPlaylistByName(SpotifyPlaylist& _return, const SpotifyCredential& cred, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPlaylistByName(_return, cred, name);
    }
    ifaces_[i]->getPlaylistByName(_return, cred, name);
    return;
  }

  void selectPlaylist(const SpotifyCredential& cred, const std::string& playlist) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectPlaylist(cred, playlist);
    }
    ifaces_[i]->selectPlaylist(cred, playlist);
  }

  void selectPlaylistById(const SpotifyCredential& cred, const int32_t plist_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectPlaylistById(cred, plist_id);
    }
    ifaces_[i]->selectPlaylistById(cred, plist_id);
  }

  void selectTrack(const SpotifyCredential& cred, const std::string& track) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectTrack(cred, track);
    }
    ifaces_[i]->selectTrack(cred, track);
  }

  void selectTrackById(const SpotifyCredential& cred, const int32_t track_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->selectTrackById(cred, track_id);
    }
    ifaces_[i]->selectTrackById(cred, track_id);
  }

  bool merge2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyPlaylist& tracks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->merge2playlist(cred, pl, tracks);
    }
    return ifaces_[i]->merge2playlist(cred, pl, tracks);
  }

  bool add2playlist(const SpotifyCredential& cred, const std::string& pl, const SpotifyTrack& track) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add2playlist(cred, pl, track);
    }
    return ifaces_[i]->add2playlist(cred, pl, track);
  }

  void whats_playing(SpotifyTrack& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->whats_playing(_return);
    }
    ifaces_[i]->whats_playing(_return);
    return;
  }

};



#endif
