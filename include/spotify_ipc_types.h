/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef spotify_ipc_TYPES_H
#define spotify_ipc_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _SpotifyIPCCredential__isset {
  _SpotifyIPCCredential__isset() : _uuid(false) {}
  bool _uuid;
} _SpotifyIPCCredential__isset;

class SpotifyIPCCredential {
 public:

  static const char* ascii_fingerprint; // = "F4A50F0EC638C7F66026F9B6678FD89B";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

  SpotifyIPCCredential() : _username(), _passwd(), _uuid() {
  }

  virtual ~SpotifyIPCCredential() throw() {}

  std::string _username;
  std::string _passwd;
  std::string _uuid;

  _SpotifyIPCCredential__isset __isset;

  void __set__username(const std::string& val) {
    _username = val;
  }

  void __set__passwd(const std::string& val) {
    _passwd = val;
  }

  void __set__uuid(const std::string& val) {
    _uuid = val;
    __isset._uuid = true;
  }

  bool operator == (const SpotifyIPCCredential & rhs) const
  {
    if (!(_username == rhs._username))
      return false;
    if (!(_passwd == rhs._passwd))
      return false;
    if (__isset._uuid != rhs.__isset._uuid)
      return false;
    else if (__isset._uuid && !(_uuid == rhs._uuid))
      return false;
    return true;
  }
  bool operator != (const SpotifyIPCCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotifyIPCCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpotifyIPCCredential &a, SpotifyIPCCredential &b);



#endif
