/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SpotifyIPC_H
#define SpotifyIPC_H

#include <thrift/TDispatchProcessor.h>
#include "spotify_ipc_types.h"



class SpotifyIPCIf {
 public:
  virtual ~SpotifyIPCIf() {}
};

class SpotifyIPCIfFactory {
 public:
  typedef SpotifyIPCIf Handler;

  virtual ~SpotifyIPCIfFactory() {}

  virtual SpotifyIPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SpotifyIPCIf* /* handler */) = 0;
};

class SpotifyIPCIfSingletonFactory : virtual public SpotifyIPCIfFactory {
 public:
  SpotifyIPCIfSingletonFactory(const boost::shared_ptr<SpotifyIPCIf>& iface) : iface_(iface) {}
  virtual ~SpotifyIPCIfSingletonFactory() {}

  virtual SpotifyIPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SpotifyIPCIf* /* handler */) {}

 protected:
  boost::shared_ptr<SpotifyIPCIf> iface_;
};

class SpotifyIPCNull : virtual public SpotifyIPCIf {
 public:
  virtual ~SpotifyIPCNull() {}
};

class SpotifyIPCClient : virtual public SpotifyIPCIf {
 public:
  SpotifyIPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SpotifyIPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpotifyIPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SpotifyIPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SpotifyIPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  SpotifyIPCProcessor(boost::shared_ptr<SpotifyIPCIf> iface) :
    iface_(iface) {
  }

  virtual ~SpotifyIPCProcessor() {}
};

class SpotifyIPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SpotifyIPCProcessorFactory(const ::boost::shared_ptr< SpotifyIPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SpotifyIPCIfFactory > handlerFactory_;
};

class SpotifyIPCMultiface : virtual public SpotifyIPCIf {
 public:
  SpotifyIPCMultiface(std::vector<boost::shared_ptr<SpotifyIPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpotifyIPCMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SpotifyIPCIf> > ifaces_;
  SpotifyIPCMultiface() {}
  void add(boost::shared_ptr<SpotifyIPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
};



#endif
